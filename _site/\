<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>use bit operator</title>
    <meta name="description" content="">

    <link rel="stylesheet" href=" /css/customer/syntax.css ">
    <link rel="stylesheet" href=" /css/customer/customer.css ">
    <!-- bootstrap3 -->
    <link rel="stylesheet" href=" /css/bootstrap3/css/bootstrap.min.css ">
    <link rel="canonical" href="http://smileboywtu.github.io/%5C">

    <!-- isso comment system -->
    <script data-isso="//121.42.178.129" data-isso-lang="en" data-isso-css="true" src="//121.42.178.129/js/embed.min.js"></script>

    <!-- bootstrap 3 -->
    <script src=" /css/bootstrap3/js/jquery-1.12.0.min.js "></script>
    <script src=" /css/bootstrap3/js/bootstrap.min.js "></script>

    <!-- owner special recommendation -->
    <script>
        $.get(
            "http://121.42.178.129/recommendation/music",
            function(data){
                $('#recommendation').append(data);
            },"html");
    </script>

    
    <script>
        $(document).ready(function() {
            $("#id-page-use bit operator-title").addClass("active");
        });
    </script>
    

</head>


<body>
    <div>
        <header>

    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">Coder Life</a>
            </div>

            <div class="collapse navbar-collapse">
                <ul class="nav navbar-nav">
                    <li id="id-page-Projects-title">
                        <a href=" /Projects/ ">Projects</a>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Explore <span class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li id="id-page-About-title"><a href=" /About/ ">About</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="https://github.com/smileboywtu">GitHub</a></li>
                            <li><a href="http://smileboywtu.deercv.com">Deer CV</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

</header>


        <div class="container-fluid">
            <div class="row default">
                <div class="col-lg-6">
                    <div class="post" itemscope itemtype="http://schema.org/BlogPosting">

    <h2 class="post-title">use bit operator</h2>

    <p class="post-meta">
        <small>
            <time datetime="2016-02-25T17:33:00+08:00" itemprop="datePublished">
                Feb 25, 2016
            </time>
        </small>
    <p>

    <div class="post-content">
        ## contents

In this document, we'll study how a program can manipulate computers' integer
representation directly using bit operators. This is sometimes pejoratively
called “bit twiddling,” but expert developers would agree that mastering bit
operators is a key skill for proficient programmers.

### bit operators

The most significant bit operators are the bitwise operators, which perform
logic operations on all bits at once. For example, the bitwise NOT operator
~ (also called the bitwise complement) takes the NOT of all the bits in an
integer. For example, if b holds the int value 00110111, then ~b flips all
these bits to arrive at the int value 11001000.

The other bitwise operators — bitwise AND &, bitwise OR |, and bitwise XOR ^ —
work with two operands. Each pairs corresponding bits in the two operands and
performing the logical operation on them. For example, to compute the bitwise
OR of 1100 and 1010, we take the OR of the first bit from each number (1, 1),
followed by the OR of the second bits (1, 0), then the third bits (0, 1), then
the fourth bits (0, 0). For each of these bit pairs, we include a 1 in the
result if the first bit or the second bit in the pair is 1 (or if both are one).
Thus, we end up with an output of 1110.

Similarly, the bitwise AND includes a 1 in the result if the first bit and the
second bit in the pair is 1; the bitwise AND of 1100 and 1010 ends up being 1000.
And the bitwise XOR (short for exclusive or) includes a 1 if the first bit or
the second bit is 1 (but excluding the case that both bits are 1); the bitwise
XOR of 1100 and 1010 ends up being 0110.

The following illustrates these operators at work.

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0x23</span><span class="p">;</span>        <span class="o">/*</span> <span class="mo">00100011</span> <span class="o">*/</span>
<span class="nb">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0x36</span><span class="p">;</span>        <span class="o">/*</span> <span class="mo">00110110</span> <span class="o">*/</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">~</span><span class="n">a</span><span class="p">);</span>
  <span class="o">/*</span> <span class="n">prints</span> <span class="n">DC</span> <span class="p">(</span><span class="nb">hex</span> <span class="k">for</span> <span class="mi">11011100</span><span class="p">)</span> <span class="o">*/</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
  <span class="o">/*</span> <span class="n">prints</span> <span class="mi">22</span> <span class="p">(</span><span class="nb">hex</span> <span class="k">for</span> <span class="mo">00100010</span><span class="p">)</span> <span class="o">*/</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">);</span>
  <span class="o">/*</span> <span class="n">prints</span> <span class="mi">37</span> <span class="p">(</span><span class="nb">hex</span> <span class="k">for</span> <span class="mo">00110111</span><span class="p">)</span> <span class="o">*/</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="si">%</span><span class="s">x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">);</span>
  <span class="o">/*</span> <span class="n">prints</span> <span class="mi">15</span> <span class="p">(</span><span class="nb">hex</span> <span class="k">for</span> <span class="mo">00010101</span><span class="p">)</span> <span class="o">*/</span></code></pre></figure>

    </div>

    
    <hr>
    <div class="post-comments">
        <section id="isso-thread"></section>
    </div>

    

</div>

                </div>
                <div class="col-lg-6">
                    <div class="recommendation-default">
                        <div class="table-responsive" id="recommendation">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <footer class="footer">
    <div class="container">

        <div>
            <a href="https://github.com/smileboywtu">
                <span class="icon"><svg viewBox="0 0 16 16"><path fill="#828282" d="M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"/></svg>
</span>
            </a>
        </div>

        <div class="text-muted">
            <small>Designed By Smile Boy.</small>
        </div>

    </div>
</footer>

    </div>
</body>


</html>
